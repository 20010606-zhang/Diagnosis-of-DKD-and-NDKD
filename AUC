import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import roc_curve, auc
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

train_file_path = 'test1.xlsx'
train_data = pd.read_excel(train_file_path)


feature_columns = ['DR', 'Duration of DM', 'HbA1c', 'eGFR', 'Serum creatinine', 'TC', 'Urine protein excretion', 'FBG', 'BMI', 'Age', 'SBP', 'LDL']
target_column = '病理分型'

X_train_all = train_data[feature_columns].values
y_train_all = train_data[target_column].values

X_validation = validation_data[feature_columns].values
y_validation = validation_data[target_column].values

imputer = SimpleImputer(strategy='mean')
X_train_all = imputer.fit_transform(X_train_all)
X_validation = imputer.transform(X_validation)

models = [
    RandomForestClassifier(random_state=42),
    GradientBoostingClassifier(random_state=42),
    LogisticRegression(random_state=42, solver='liblinear', max_iter=1000),
    SVC(random_state=42, probability=True),
    DecisionTreeClassifier(random_state=42)
]

model_names = ['RF', 'LightGBM', 'LR', 'SVM', 'DT']
colors = ['blue', 'green','red', 'purple', 'orange']
n_iterations = 15
train_all_fpr = {name: [] for name in model_names}
train_all_tpr = {name: [] for name in model_names}
train_all_auc = {name: [] for name in model_names}

val_all_fpr = {name: [] for name in model_names}
val_all_tpr = {name: [] for name in model_names}
val_all_auc = {name: [] for name in model_names}

for _ in range(n_iterations):
    X_train, X_test, y_train, y_test = train_test_split(X_train_all, y_train_all, test_size=0.2, random_state=None)

    for model, name in zip(models, model_names):
        model.fit(X_train, y_train)
        y_pred_proba_test = model.predict_proba(X_test)[:, 1]
        fpr_test, tpr_test, thresholds_test = roc_curve(y_test, y_pred_proba_test)
        roc_auc_test = auc(fpr_test, tpr_test)

        train_all_fpr[name].append(fpr_test)
        train_all_tpr[name].append(tpr_test)
        train_all_auc[name].append(roc_auc_test)

        y_pred_proba_val = model.predict_proba(X_validation)[:, 1]
        fpr_val, tpr_val, thresholds_val = roc_curve(y_validation, y_pred_proba_val)
        roc_auc_val = auc(fpr_val, tpr_val)

        val_all_fpr[name].append(fpr_val)
        val_all_tpr[name].append(tpr_val)
        val_all_auc[name].append(roc_auc_val)

plt.figure(figsize=(10, 8))
for i, name in enumerate(model_names):
    mean_fpr = np.linspace(0, 1, 100)
    tprs = []
    for j in range(n_iterations):
        tpr = np.interp(mean_fpr, train_all_fpr[name][j], train_all_tpr[name][j])
        tpr[0] = 0.0
        tprs.append(tpr)
    mean_tpr = np.mean(tprs, axis=0)
    mean_tpr[-1] = 1.0
    mean_auc = np.mean(train_all_auc[name])
    plt.plot(mean_fpr, mean_tpr, label=f'{name} (AUC = {mean_auc:.2f})', color=colors[i])
plt.plot([0, 1], [0, 1], 'k--', label='Random Guess (AUC = 0.50)')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc="lower right")
plt.grid(True)
plt.savefig('1-ROC曲线', dpi=300)
plt.show()


plt.figure(figsize=(10, 6))
train_auc_data = [train_all_auc[name] for name in model_names]
bp = plt.boxplot(train_auc_data, tick_labels=model_names)
for i, patch in enumerate(bp['boxes']):
    patch.set_color(colors[i])
for i, median in enumerate(bp['medians']):
    median.set_color(colors[i])
plt.ylabel('AUC')
plt.grid(True)
plt.savefig('1-ROC-箱型图.png', dpi=300)
plt.show()
